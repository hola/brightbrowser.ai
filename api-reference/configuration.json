{
  "openapi": "3.0.3",
  "info": {
    "title": "Configuring browser.ai",
    "version": "1.0.0",
    "description": "Set up browser.ai for web automation. Get your credentials, run sample scripts, and inspect live sessions effortlessly.\n"
  },
  "servers": [
    {
      "url": "https://brd.superproxy.io"
    }
  ],
  "paths": {
    "/browserai/setup": {
      "get": {
        "summary": "Setup Instructions",
        "description": "Retrieve your browser.ai credentials and install Puppeteer, Playwright, or Selenium before proceeding.\n",
        "responses": {
          "200": {
            "description": "Setup instructions loaded"
          }
        }
      }
    },
    "/browserai/test-connection": {
      "post": {
        "summary": "Test browser.ai Connection",
        "description": "Run a sample script to verify your browser.ai connection using Puppeteer, Playwright, or Selenium.\n",
        "parameters": [
          {
            "name": "AUTH",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "USER:PASS"
            }
          },
          {
            "name": "TARGET_URL",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "https://example.com"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Puppeteer (Node.js)",
            "source": "const puppeteer = require('puppeteer-core');\nconst AUTH = 'USER:PASS';\nconst SBR_WS_ENDPOINT = `wss://${AUTH}@brd.superproxy.io:9222`;\nasync function main() {\n  const browser = await puppeteer.connect({ browserWSEndpoint: SBR_WS_ENDPOINT });\n  const page = await browser.newPage();\n  await page.goto('https://example.com', { timeout: 120000 });\n  await page.screenshot({ path: './page.png', fullPage: true });\n  const html = await page.content();\n  console.log(html);\n  await browser.close();\n}\nmain();\n"
          },
          {
            "lang": "Python",
            "label": "Playwright (Python)",
            "source": "import asyncio\nfrom playwright.async_api import async_playwright\nAUTH = 'USER:PASS'\nBBAI_WS_CDP = f'wss://{AUTH}@brd.superproxy.io:9222'\nasync def run(playwright):\n    browser = await playwright.chromium.connect_over_cdp(BBAI_WS_CDP)\n    page = await browser.new_page()\n    await page.goto('https://example.com', timeout=120000)\n    await page.screenshot(path='./page.png', full_page=True)\n    html = await page.content()\n    print(html)\n    await browser.close()\nasync def main():\n    async with async_playwright() as playwright:\n        await run(playwright)\nasyncio.run(main())\n"
          },
          {
            "lang": "C#",
            "label": "PuppeteerSharp (C#)",
            "source": "using PuppeteerSharp;\nvar AUTH = \"USER:PASS\";\nvar BBAI_WS_ENDPOINT = $\"wss://{AUTH}@brd.superproxy.io:9222\";\nvar browser = await Puppeteer.ConnectAsync(new ConnectOptions {\n    BrowserWSEndpoint = BBAI_WS_ENDPOINT\n});\nvar page = await browser.NewPageAsync();\nawait page.GoToAsync(\"https://example.com\", new NavigationOptions { Timeout = 120000 });\nawait page.ScreenshotAsync(\"./page.png\", new() { FullPage = true });\nvar html = await page.GetContentAsync();\nConsole.WriteLine(html);\nawait browser.CloseAsync();\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection test completed"
          }
        }
      }
    },
    "/browserai/devtools": {
      "get": {
        "summary": "Launch DevTools",
        "description": "Automatically open Chrome DevTools for live debugging of your browser.ai session.\n",
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Puppeteer (Node.js)",
            "source": "const { exec } = require('child_process');\nconst chromeExecutable = 'google-chrome';\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst openDevtools = async (page, client) => {\n  const frameId = page.mainFrame()._id;\n  const { url: inspectUrl } = await client.send('Page.inspect', { frameId });\n  exec(`\"${chromeExecutable}\" \"${inspectUrl}\"`, error => {\n    if (error) throw new Error('Unable to open devtools: ' + error);\n  });\n  await delay(5000);\n};\nconst page = await browser.newPage();\nconst client = await page.target().createCDPSession();\nawait openDevtools(page, client);\nawait page.goto('http://example.com');\n"
          }
        ],
        "responses": {
          "200": {
            "description": "DevTools launched"
          }
        }
      }
    },
    "/browserai/session-limits": {
      "get": {
        "summary": "Session Limits & Timeouts",
        "description": "Details on session restrictions including idle timeout, max session length, and navigation limits.\n",
        "responses": {
          "200": {
            "description": "Session limits returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "singleNavigation": {
                      "type": "string",
                      "example": "Only one site load per session is allowed."
                    },
                    "idleTimeout": {
                      "type": "string",
                      "example": "Sessions inactive for 5 minutes will auto-close."
                    },
                    "maxSessionLength": {
                      "type": "string",
                      "example": "Sessions expire after 30 minutes."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/browserai/run-script": {
      "post": {
        "summary": "Run Your Script",
        "description": "Execute your browser.ai automation script using Node.js or Python.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "language": {
                    "type": "string",
                    "enum": [
                      "node",
                      "python"
                    ],
                    "example": "node"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "Node.js",
            "source": "node script.js\n"
          },
          {
            "lang": "Shell",
            "label": "Python",
            "source": "python main.py\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Script executed"
          }
        }
      }
    }
  },
  "components": {}
}